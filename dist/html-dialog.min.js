var HtmlDialog = (function (exports) {
    'use strict';

    /**
     * @param {String} title
     * @param {String} content
     * @param {Array} buttons
     * @param {Object} classNames
     * @constructor
     */
    function Dialog(_ref) {
      var _classNames$dialog;
      var title = _ref.title,
        content = _ref.content,
        buttons = _ref.buttons,
        _ref$css = _ref.css,
        classNames = _ref$css === void 0 ? {
          dialog: '',
          title: '',
          content: '',
          buttons: ''
        } : _ref$css;
      // check if all parameters are passed
      if (!title || !content || !buttons) {
        throw new Error('Missing parameters');
      }
      var randomId = function randomId(prefix) {
        return prefix + Math.random().toString(36).substr(2, 9);
      };
      var tpl = "\n        <div class=\"".concat(classNames['title'], "\">").concat(title, "</div>\n        <div class=\"").concat(classNames['content'], "\">").concat(content, "</div>\n        <div class=\"").concat(classNames['buttons'], "\">\n            ").concat(buttons.map(function (button) {
        return "<button class=\"".concat(button.classNames, "\">").concat(button.text, "</button>");
      }).join(''), "\n        </div>\n    ");

      // create dialog element
      var dialogElement = document.createElement('dialog');
      dialogElement.id = randomId('html-dialog-');
      dialogElement.className = (_classNames$dialog = classNames['dialog']) !== null && _classNames$dialog !== void 0 ? _classNames$dialog : '';
      dialogElement.innerHTML = tpl;
      document.body.appendChild(dialogElement);
      var dialog = document.querySelector("#".concat(dialogElement.id));

      // add event listeners to buttons
      buttons.forEach(function (button, index) {
        var buttonElement = dialog.querySelector("button:nth-child(".concat(index + 1, ")"));
        var mouseEvents = ['onclick', 'oncontextmenu', 'ondblclick', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup'];

        // check if the button has an allowed mouse event and add it
        Object.keys(button).forEach(function (mouseEvent) {
          if (mouseEvents.includes(mouseEvent)) {
            var eventType = mouseEvent.replace('on', '');
            buttonElement.addEventListener(eventType, function (event) {
              button[mouseEvent].call(dialog, event);
            });
          }
        });
      });
      return {
        open: function open() {
          dialog.showModal();
        },
        close: function close() {
          dialog.close();
        },
        destroy: function destroy() {
          document.body.removeChild(dialog);
        }
      };
    }

    exports.Dialog = Dialog;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
